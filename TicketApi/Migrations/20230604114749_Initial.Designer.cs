// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicketApi.Entities;

#nullable disable

namespace TicketApi.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20230604114749_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicketApi.Entities.TicketHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<short>("FetchTries")
                        .HasColumnType("smallint")
                        .HasColumnName("fetchtries");

                    b.Property<string>("FicsalDoc")
                        .HasColumnType("text")
                        .HasColumnName("fsdoc");

                    b.Property<string>("FicsalSign")
                        .HasColumnType("text")
                        .HasColumnName("fssign");

                    b.Property<string>("FsId")
                        .HasColumnType("text")
                        .HasColumnName("fsid");

                    b.Property<bool>("Manual")
                        .HasColumnType("boolean")
                        .HasColumnName("manual");

                    b.Property<DateTimeOffset>("NextFetchDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("nextfetch");

                    b.Property<string>("Operator")
                        .HasColumnType("text")
                        .HasColumnName("operator");

                    b.Property<string>("ShopAddress")
                        .HasColumnType("text")
                        .HasColumnName("shopaddress");

                    b.Property<string>("ShopInn")
                        .HasColumnType("text")
                        .HasColumnName("shopinn");

                    b.Property<string>("ShopName")
                        .HasColumnType("text")
                        .HasColumnName("shopname");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TicketId")
                        .HasColumnType("text")
                        .HasColumnName("ticketid");

                    b.Property<decimal>("TicketSum")
                        .HasColumnType("numeric")
                        .HasColumnName("ticketsum");

                    b.Property<DateTimeOffset>("Tsmp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tsmp");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("ticketheaders");
                });

            modelBuilder.Entity("TicketApi.Entities.TicketLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category1")
                        .HasColumnType("text")
                        .HasColumnName("category1");

                    b.Property<string>("Category2")
                        .HasColumnType("text")
                        .HasColumnName("category2");

                    b.Property<string>("Category3")
                        .HasColumnType("text")
                        .HasColumnName("category3");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<bool>("Essential")
                        .HasColumnType("boolean")
                        .HasColumnName("essential");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("PaymentType")
                        .HasColumnType("numeric")
                        .HasColumnName("paymenttype");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProductIdType")
                        .HasColumnType("text")
                        .HasColumnName("productidtype");

                    b.Property<decimal?>("ProductType")
                        .HasColumnType("numeric")
                        .HasColumnName("producttype");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<string>("RawProductCode")
                        .HasColumnType("text")
                        .HasColumnName("rawproductcode");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<long?>("TicketHeaderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TicketHeaderId");

                    b.ToTable("ticketlines");
                });

            modelBuilder.Entity("TicketApi.Entities.TicketLine", b =>
                {
                    b.HasOne("TicketApi.Entities.TicketHeader", null)
                        .WithMany("Lines")
                        .HasForeignKey("TicketHeaderId");
                });

            modelBuilder.Entity("TicketApi.Entities.TicketHeader", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
